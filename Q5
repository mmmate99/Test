#include <iostream>
#include <vector>
#include <chrono>
#include <thread>
#include <conio.h> // To use _kbhit() and getch()

// Data on the positions of opponents and players can be found here
struct Entity {
    int x;
    int y;
    int health;
};

void aoeAbility(std::vector<Entity>& enemies, Entity& player) {
    const int aoeRange = 2; // Half the diameter of a 4x4 area
    const int duration = 4; // seconds
    auto startTime = std::chrono::steady_clock::now();
    auto endTime = startTime + std::chrono::seconds(duration);

    // Pictures alternating
    bool useFirstImage = true;

    // Ability effect is active
    while (std::chrono::steady_clock::now() < endTime) {
        // Image change
        if (useFirstImage) {
            std::cout << "Tornado1\n";
        } else {
            std::cout << "Tornado2\n";
        }
        useFirstImage = !useFirstImage;

        // Damage to enemies within the AoE area
        for (auto& enemy : enemies) {
            if (abs(enemy.x - player.x) <= aoeRange && abs(enemy.y - player.y) <= aoeRange) {
                // Reduce the health of the enemy
                enemy.health -= 10; // Adjust the damage
                std::cout << "Enemies get hurt\n";
            }
        }

        // Small delay between images
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
    
    std::cout << "Spell ended\n";
}

int main() {
    // Example player and enemies
    Entity player = {5, 5, 100}; // Player position and health
    std::vector<Entity> enemies = {{3, 4, 50}, {6, 7, 60}}; // Positions of two enemies and their health

    // Main game loop
    while (true) {
        // If there is a key press
        if (_kbhit()) {
            // Let's get the button pressed
            char key = getch();
            
            // If button 1 was pressed
            if (key == '1') {
                std::cout << "Spell is active\n";
                aoeAbility(enemies, player);
            }
        }
        
    }

    return 0;
}
